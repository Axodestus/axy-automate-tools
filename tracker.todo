Bisic improvement python:
    ☐ test yield keyword
    ☐ test async functionality

    ☐ Discovering asyncio
    ☐ Discovering pytest

    ☐ Discovering OOP
    ☐ Discovering Annotations

exp.py:

Изучение, велосипедостроение, треш и плейграунт чисто для импрува.

-----------------------------------------------
    ☐ Написать алгоритм Дейкстры де факто.
        ☐ Попробовать оптимизировать алгоритм.
        ☐ Автомазитизировать создание графа для начального узла.
    ☐ Алгоритм Флойда-Уоршелла, 
    ☐ Алгоритм Беллмана-Форда

    ☐ Список смежных вершин графа, Матрица смежности графа, Взвешенные рёбра графа
    
-----------------------------------------------
    ☐ Написать пузырьковую сортировку.
    ☐ Сортировка слиянием.

    ☐ Поиск в глубину.

    ☐ Какие-нибудь деревья. реализация.

    ☐ Алгоритм умножения матриц.
    ☐ Транспонирование матриц.
    
    Сжатие данных:
        ☐ Алгоритм Хаффмана.


    Цепи Маркова:
        ☐ Разобраться что это такое
        ☐ Реализовать простой случай

-----------------------------------------------
    ☐ Создать бенчмарки с помощью модуля time.
    ☐ ООП врап реализаций.
    ☐ Упаковка в пакет.
    ☐ Глянуть что можно модифицировать в exp.py
    ☐ Сделать простой CLI.
    ☐ --help... обработка сус аргументов.
    ☐ Readme.md
    ☐ *** Сделать визуализатор алгоритмов (pygame).
        ☐ Прочитать документацию.
            ☐ Разобраться в структурном подходе фремворка
        ☐ Создать каркас pygame.
        ☐ Нарисовать примитив.
        ☐ Организовать удобную структуру.
        ☐ Нарисовать панели для управления.
        ☐ Создать хендлер интерсект для элементов управления.
        ☐ Добавить шрифт или использовать дефолтный, если есть.

    ☐ сделать таймер отсчета на основе timestamp. минуты часы днии и тд.

-------------------------------------------------------------------

programming lang and vm...main.py:
    ☐ main.py -> lang.py
        ☐ АСТ классы -> ast.py
        ☐ Дополнить парсер бинарными операторами.
        ☐ Добавить скобочки. Попробовать на основе стека
        ☐ Обработать вероятные ошибки.
        ☐ Попробовать прикрутить транслятор в nasm мнемоники.
        ☐ --help

        ☐ Разработка формального языка.
            Требования:
                - Высокий приоритет на интуитивное понимание.
                - Низкий приоритет на скорость выполнения.
                NOTE: низкий частотные тики дл
                - Высокий приоритет библиотечную целостность графики.
        
        ☐ разработка виртуальной машины bytecode -> machine code
            ☐ Discovering nasm fasm
            ☐ Discovering ELF64.
        ☐ Выбрать архитектуру модели памяти.
                ☐ Найти пошарить то, что имеется.
        
------------------------------------------------------------------

pygame section:
    ☐ Что то простое. Например создание UI истерсекция с мышкой.
        ☐ Истерсекция с клавиатурой
        ☐ Лог

    ☐ Ping-pong реализация.
    ☐ Snake реализация.
        ☐ Использовать очередь для хранения змеи.
    ☐ Tetris реализация
        ☐ Выбор структуры данных для хранения боарда.
        ☐ Репрезентация в паинте.
        ☐ Маппинг простой фигуры на боард.
        ☐ Движение фигуры по тикам.
        ☐ Вращение фигуры
            ☐ Транспонирование, умножение матриц.
        ☐ Добавление оставшихся фигур.
        ☐ Обработка исключительных ситуаций.

    Моделирование физики:
        ☐ Моделирование сил гравитации (Солнечная система)
        ☐ Столкновения

    Cellular automato реализация ***:
        - Rule 110
            ☐ Game of life
            ☐ CLI
            ☐ GUI

---------------------------------------------------------------------

Whoami проект:
Заключается в том, чтобы по определенным признакам переписки из вк получить
некоторые интересующие выходные данные. А в общем это подбор партнера.
В качестве базы данных может выступать не только переписки из вк но и некоторые
другие.
    ☐ Ознакомиться с вк апи.
    https://pypi.org/project/vk-api/ - документация одной из либ. (без асинка)
    ☐ Подобрать важные апи запросы.
        Запросы:
            TODO: какие то запросы. 
            - Статистика
    Подготовиться к дампу данных. extractor.py:
        ☐ Выбор базы данных.
        Данные приходят в формате json. Нужно знать каким образом я буду работать
        с этими данными. А может быть ОРМ?
        ☐ Выбор библиотеки для апи запросов.
            ☐ Сделать простое приложение использующее апи.
                Чисто по фану особенности
        ☐ Создание каркаса приложения екстрактора.
        ☐ Провести авторизация и получить токен.   йж
            ☐ Тестовый запрос удачно!
        ☐ Кастомизация запросов.
        ☐ Провести запрос.
            ☐ Сделать дамп.
            ☐ Провести запрос по всем истересующим методам апи.
            ☐ Дамп данных в базу данных.
            ☐ Скомпоновать данные по признакам:
                TODO: Признаки:
                    Какие то признаки.....
            ☐ Сохранить в базу данных.
    
    Вычисление признаков:
        ☐ Начнем с тупого больше меньше.
        ☐ Добавление и вычисление приоритета(веса) признака по какой-то формуле.
            
    AI:
        ☐ Организация нейросети и её обучение на основе полученной базы данных для получения оптимального собеседника.****

------------------------------------------------------------------------------

Отслеживание и ведение логов сети providerbroker.py:
    ☐ Проверка подключения лупбэка
    ☐ Проверка подключения роутера
        ☐ Получение MAC адреса.
        ☐ Получение локального адреса
    ☐ Проверка внешнего поключения.
    ☐ Проверка пинга для разных стран
    ☐ Проверка входящей исходящей скорости.
    ☐ Запись логов в файл или в системный лог
    ☐ CLI Daemon
    ☐ GUI client.
    ☐ CUI client
        ☐ Фича на изменение тика цикла.

------------------------------------------------------------------------------

Нейронная сеть:
    ☐ Создать самую простую нейронную сеть фром скрач.
        ☐ Понять как работать с матрицами в numpy